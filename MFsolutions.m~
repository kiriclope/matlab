clear all ;
GlobalVars ;

IextBL = ExternalInput(model,nbpop,dir) ; 
Iext=IextBL;

v_Iprtr = v_Iprtr(1):v_Iprtr(2):v_Iprtr(3) ;

J = ImportJab(model,nbpop,dir) ; 
Conditions = (de2bi(1:2^(nbpop)-2 )) ; 

Baseline = linsolve(J,-IextBL.') ; 

figtitle = sprintf('%s_RatesVsIopto%s_MF',dir,popList(prtrPop)) ; 
fig = figure('Name',figtitle,'NumberTitle','off') ; hold on ; 
ylabel('Norm. Activity') 
xlabel('I_{opto} (\mu A . cm^{-2})') 

for i=1:length(v_Iprtr) 

    Iext(prtrPop) = IextBL(prtrPop) + v_Iprtr(i) ; 
    Rates = linsolve(J,-Iext.') ; 

    fprintf('Iopto %.2f: ',v_Iprtr(i))
    if(all(Rates>0))
        fprintf('Full Balance: ') 
        fprintf('%.3f ', Rates) 
        fprintf('\n')
        
        for j=1:nbpop
            plot(v_Iprtr(i), Rates(j)./Baseline(j),'color',cl{j},'marker','o','markerSize',mkSize)
        end
    else
        fprintf('No Full Balance \n ') 
    end

    for j=1:length(Conditions)
        
        Icond = Iext ;
        Jcond = J ;
        Rcond = zeros(1,nbpop) ;            
        Bcond = zeros(1,nbpop) ;            
        
        Idx = find(Conditions(j,:).') ;
        nonIdx = sort(find(Conditions(j,:).'==0),'descend') ;

        Rcond = Rcond(Idx) ;
        Icond = Iext(Idx) ;
        Bcond = Bcond(Idx) ;

        for k=1:length(nonIdx)
            Jcond(nonIdx(k),:) = [] ;
            Jcond(:,nonIdx(k)) = [] ;
        end

        if(length(Icond)>1)
            Rcond = linsolve(Jcond,-Icond.') ; 
        else
            Rcond = Icond./Jcond ;
        end

        nonInputs = Iext(nonIdx).' + Jcond*Rcond ; 

        if(all(Rcond>0) && all(nonInputs<=0) )
            fprintf('Rates ') 
            fprintf('%.3f ',Rates) 
            fprintf('\n')
            for k=1:length(Rcond)
                plot(v_Iprtr(i), Rcond(k)./Baseline(Idx(k)),'color',cl{Idx(k)},'marker','x','markersize',mkSize)
            end
        end
    end
    fprintf('\n')

    if(nbpop==4)
        fprintf('O(1/sqrtK) solution: ')

        Icond = Iext ;
        Jcond = J ;
        Rcond = zeros(1,nbpop) ;            

        Jcond(4,:) = [] ;
        Jcond(:,4) = [] ;
        Icond(4) = [] ;

        Jcond(3,:) = [] ;
        Jcond(:,1) = [] ;
        Icond(3) = [] ;
        
        Rcond = linsolve(Jcond,-Icond.') ; 
        %nonInputs = Iext(4) + J(4,2) * Rcond(1) + J(4,3) * Rcond(2) ;

        if(all(Rcond>0) )  
            fprintf('(%d) Partial Balance, ', j)
            fprintf('%d ', Conditions(j,:) ) 
            fprintf(': ')
            fprintf('Rates ') 
            fprintf('%.3f ',Rcond) 
            plot(v_Iprtr(i), Rcond(2)./Baseline(2),'color',cl{2},'marker','x','markersize',mkSize)
            plot(v_Iprtr(i), Rcond(1)./Baseline(3),'color',cl{3},'marker','x','markersize',mkSize)
        end
        fprintf('\n')
    end
end
